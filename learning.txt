1 . ARG UID=1000
    ARG GID=1000
    this type or parametrs in dockerfile is used only in build time they are like parameters in bash they did not store permanent unless they copy in env 
    they run using --build-arg flag during docker build command 

2 . env varibles are used in both run time and build time 
    they permanently store in image until they are overwrite

these are some common depnedencies which use in dockerfile 

ðŸ”¹ 1. Database related

libpq-dev â†’ PostgreSQL ke liye (Python ka psycopg2)
default-libmysqlclient-dev â†’ MySQL ke liye (Python ka mysqlclient)
sqlite3 + libsqlite3-dev â†’ SQLite ke liye

ðŸ”¹ 2. Image / Video Processing

libjpeg-dev â†’ JPEG support (Pillow, OpenCV)
zlib1g-dev â†’ PNG/GIF compression (Pillow)
libpng-dev â†’ PNG images ke liye
libtiff-dev â†’ TIFF image files
ffmpeg â†’ Audio / Video processing (Django + Media apps)

ðŸ”¹ 3. Security / Encryption

libssl-dev â†’ SSL/TLS (cryptography, OpenSSL, Django/Flask secure cookies)
libffi-dev â†’ Python cryptography libraries (paramiko, bcrypt, etc.)

ðŸ”¹ 4. Python / Machine Learning

python3-dev â†’ Python headers (C extensions compile karne ke liye)
build-essential â†’ GCC compiler tools (numpy, pandas, lxml jaise heavy libs ke liye)
libatlas-base-dev â†’ NumPy / SciPy ke liye (fast linear algebra)
libopencv-dev â†’ OpenCV computer vision ke liye

ðŸ”¹ 5. Node / Frontend

nodejs (agar image me Node pre-installed nahi hai)
npm / yarn â†’ JS/React/Angular build tools
sass / dart-sass â†’ SCSS to CSS conversion (frontend assets)

ðŸ”¹ 6. Web Servers / Runtimes

gunicorn (Python WSGI server for Flask/Django)
uvicorn + fastapi (Python ASGI server for modern apps)
nginx â†’ Static files serve karne / reverse proxy ke liye

ðŸ”¹ Bonus: Misc Useful
curl â†’ APIs test karne aur downloads ke liye
git â†’ Agar repo se code pull karna hai

tzdata â†’ Timezone setup karne ke liye


ðŸ”¹ Identify Linux Distro in Container
docker exec -it <container> sh â†’ enter container shell
cat /etc/os-release â†’ distro info
docker inspect <container> --format '{{.Config.Image}}' â†’ base image name from host

ðŸ”¹ Python Images (Size Optimization)
python:3.6 â†’ based on Debian Buster (large size ~900MB)
python:3.6-slim â†’ smaller Debian (~80â€“100MB)
python:3.6-alpine â†’ minimal Alpine (~30MB), best for lightweight but some libs may break

ðŸ”¹ ENTRYPOINT vs CMD
CMD â†’ default command (overridable)
ENTRYPOINT â†’ fixed program (cannot be overridden easily, only args can be changed)
Final command = ENTRYPOINT + CMD
ENTRYPOINT â†’ executable
CMD â†’ default args

ðŸ”¹ sleep Command (Linux)
sleep 100 â†’ pauses execution for 100 seconds
Units: s (seconds, default), m (minutes), h (hours), d (days)
Use cases: debugging, container keeping alive, script delays

ðŸ”¹ Find Container Subnet
Inside container:
ip addr show eth0 â†’ shows IP + subnet
ip route â†’ shows default gateway + subnet
From host:
docker inspect <container> â†’ find network
docker network inspect <network> â†’ shows Subnet and Gateway

ðŸ”¹ Create Custom Docker Network
docker network create \
  --driver bridge \
  --subnet=182.18.0.0/24 \
  --gateway=182.18.0.1 \
  wp-mysql-network
Verify:
docker network ls â†’ list networks
docker network inspect wp-mysql-network â†’ details (subnet + gateway)
Containers attached to same custom network can talk directly.


# To push image in youre docker registry 
first you login your registry
then tag like this : docker tag myapp:latest <registry-username>/<repository-name>:<tag>
docker tag myapp:latest myusername/myapp:1.0

push the image like this : docker push <registry-username>/<repository-name>:<tag>
docker push myusername/myapp:1.0

